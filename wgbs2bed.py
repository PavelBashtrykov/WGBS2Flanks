#!/usr/bin/env python

################################################################################
# This script is written by Pavel Bashtrykov
# pavel.bashtrykov@ibtb.uni-stuttgart.de
# pavel.bashtrykov@gmail.com
################################################################################

import argparse


def main():
    # paramethers of the run
    parser = argparse.ArgumentParser()
    parser.add_argument("--infile", help="Input file", type=str, required=True)
    parser.add_argument("--outfile", help="Output file", type=str)
    parser.add_argument(
        "--bmap", help="Methylation report generated by BMap, default is Bismark report", action="store_true"
    )
    args = parser.parse_args()

    infile = args.infile
    savein = args.outfile if args.outfile else "coordinates.bed"

    # main part
    print("Generating a bed file with flank coordinates...")
    with open(infile, "r") as fh, open(savein, "w") as s:

        line = fh.readline()
        while line:
            data = line.split()
            if (
                int(data[3]) >= 0 or int(data[4]) >= 0
            ):
                if data[2] == "+":
                    data = _get_plus_strand_coordinates(data)
                else:
                    data = _get_minus_strand_coordinates(data)
                if not args.bmap:
                    # if this is a BMap report, no changes needed, keeps mC and total C counts
                    # if this is a Bismark report (default)
                    # replace unmethylated cytosine count by sum of methylated + unmethylated = total C counts
                    try:
                        data[5] = str(int(data[4]) + int(data[5]))
                    except:
                        data = None
                # merge last columns of methylation report in one string
                if data:
                    name = ";".join(data[4:])
                    data.insert(3, name)  # add "name field" to a bed file
                    data.insert(4, str(0))  # add 0 score field bed file, just to keep a format
                    s.write("\t".join(data[:6]))
                    s.write("\n")
            line = fh.readline()

def _get_plus_strand_coordinates(indata: list, leftflank: int = 10, rightflank: int = 10, motif_length: int = 2) -> list | None:
    """Takes one line of methylation report as a list, gets a cytosine coordinate,
	converts to 0 base coordinate, adds the next nucleotide coordinate, this will be CN, and adds N bases around this central CN dinucleotide.
	
	Parameters
	----------
	indata : list, elements of one line from methylation report
    leftflank: int, number of nucleotides to add at 5' end
    rightflank: int, number of nucleotides to add at 3' end
    motif_length: int, length of a central motif, e.g. for CN it is 2

	Returns
	-------
	indata : list, with a new start coordinate and an end coordinate
		Coordinates correspond to 22 nucleotide sequence with the central CN dinucleotide in default setting.
	"""
    # calculate the start coordinate to 0 base add -10 flank
    start = int(indata[1]) - 1 - leftflank
    if start < 0:
        return None
    else:
        # update the start coordinate to 0 base add -10 flank
        indata[1] = str(start)
        # add the end coordinate to make CN+-10 nucleotides
        indata.insert(2, str(start + leftflank + motif_length + rightflank))
        return indata

def _get_minus_strand_coordinates(indata: list, leftflank: int = 10, rightflank: int = 10, motif_length: int = 2) -> list | None:
    """The same as _get_plus_strand_coordinate, but shifts a start coordinate by -1.
	"""
    # calculate the start coordinate to 0 base, add -1 for CN, add -10 for flank
    start = int(indata[1]) - 1 - 1 - leftflank
    if start < 0:
        return None
    else:
        # update the start coordinate to 0 base add -10 flank
        indata[1] = str(start)
        # add the end coordinate to make CN+-10 nucleotides
        indata.insert(2, str(start + leftflank + motif_length + rightflank))
        return indata


if __name__ == "__main__":
    main()
